import Axios from "axios";
import { User, VoiceChannel } from "discord.js";
import { EventEmitter } from "events";
import { Node } from "./structures/Node";
import { Player } from "./structures/Player";
import { Queue } from "./structures/Queue";
import { SearchResult } from "./entities/SearchResult";
import { Track } from "./structures/Track";
import PlayerStore from "./stores/PlayerStore";
import NodeStore from "./stores/NodeStore";
import { Type } from "./entities/Utils";

/**
 * The INodeOptions interface.
 */
export interface INodeOptions {
    /**
     * The host for the node.
     */
    host: string;
    /**
     * The port for the node.
     */
    port: number;
    /**
     * The password for the node.
     */
    password: string;
    /**
     * The retry amount for the node.
     */
    retryAmount?: number;
    /**
     * The retry delay for the node.
     */
    retryDelay?: number;
}

/**
 * The IErelaOptions interface.
 * @export
 * @interface IErelaOptions
 */
export interface IErelaOptions {
    /**
     * Shard count.
     */
    shardCount?: number;
    /**
     * The custom Player class.
     */
    player?: Type<Player>;
    /**
     * The custom Node class.
     */
    node?: Type<Node>;
    /**
     * The custom Track class.
     */
    track?: Type<Track>;
    /**
     * The custom Queue class.
     */
    queue?: Type<Queue>;
}

const defaultOptions: IErelaOptions = {
    shardCount: 1,
    player: Player as any,
    node: Node as any,
    track: Track as any,
    queue: Queue as any,
};

/**
 * The Erela class.
 * @noInheritDoc
 */
export class ErelaClient extends EventEmitter {
    /**
     * The Discord client.
     */
    public readonly client: any;
    /**
     * The shard count.
     */
    public readonly shardCount: number = 1;
    /**
     * The client user ID.
     */
    public readonly userId: string;
    /**
     * The custom Node class.
     */
    public readonly node: Type<Node>;
    /**
     * The custom Player class.
     */
    public readonly player: Type<Player>;
    /**
     * The custom Queue class.
     */
    public readonly queue: Type<Queue>;
    /**
     * The custom Track class.
     */
    public readonly track: Type<Track>;
    /**
     * The PlayerStore collection.
     */
    public readonly players: PlayerStore;
    /**
     * The NodeStore collection.
     */
    public readonly nodes: NodeStore;
    private voiceState: any = {};
    private readonly httpRegex: RegExp = /^https?:\/\//;

    /**
     * Emitted when a player is created.
     * @event ErelaClient#playerCreate
     * @param {Player} player - The created player.
     */

    /**
     * Emitted when a player is destroyed.
     * @event ErelaClient#playerDestroy
     * @param {Player} player - The destroyed player.
     */

    /**
     * Emitted when a player is moved to a new channel.
     * @event ErelaClient#playerMove
     * @param {Player} player - The moved player.
     * @param {VoiceChannel} oldChannel - The old voice channel.
     * @param {VoiceChannel} newChannel - The new voice channel.
     */

    /**
     * Emitted when a track is started.
     * @event ErelaClient#trackStart
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that started.
     */

    /**
     * Emitted when a track ends.
     * @event ErelaClient#trackEnd
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     */

    /**
     * Emitted when a track gets stuck during playback.
     * @event ErelaClient#trackStuck
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     * @param {*} message - The message for the event.
     */

    /**
     * Emitted when a track errors during playback.
     * @event ErelaClient#trackStuck
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     * @param {*} message - The message for the event.
     */

    /**
     * Emitted when a queue ends.
     * @event ErelaClient#queueEnd
     * @param {Player} player - The player who's queue has ended.
     */

    /**
     * Emitted when a player voice channel connected is closed.
     * @event ErelaClient#socketClosed
     * @param {Player} player - The player.
     */

    /**
     * Emitted when a node is created.
     * @event ErelaClient#nodeCreate
     * @param {Node} node - The created node.
     */

    /**
     * Emitted when a node connects.
     * @event ErelaClient#nodeConnect
     * @param {Node} node - The node that connected.
     */

    /**
     * Emitted when a node reconnects.
     * @event ErelaClient#nodeReconnect
     * @param {Node} node - The node that reconnected.
     */

    /**
     * Emitted when a node encounters an error.
     * @event ErelaClient#nodeError
     * @param {Node} node - The node.
     * @param {Error} error - The error.
     */

    /**
     * Emitted when a node disconnects abnormally.
     * @event ErelaClient#nodeDisconnect
     * @param {Node} node - The node.
     * @param {Error} error - The error.
     */

    /**
     * Creates an instance of ErelaClient.
     * @param {*} client - The Discord client.
     * @param {Array<INodeOptions>} nodes - The nodes to use.
     * @param {IErelaOptions} [options=defaultOptions] - Options for the client.
     */
    public constructor(client: any, nodes: INodeOptions[], options?: IErelaOptions) {
        super();

        let _nodes: any = [];
        let _options = defaultOptions;

        if (Array.isArray(nodes) && !options) {
            _nodes = nodes;
        } else if (nodes && !Array.isArray(nodes) && !options) {
            _options = nodes as IErelaOptions;
        } else if (Array.isArray(nodes) && options) {
            _nodes = nodes;
            _options = options;
        }

        this.client = client;
        this.userId = client.user.id;
        this.shardCount = _options.shardCount || 1;
        this.node = _options.node || Node;
        this.player = _options.player || Player;
        this.queue = _options.queue || Queue;
        this.track = _options.track || Track;
        this.players = new PlayerStore(this);
        this.nodes = new NodeStore(this, _nodes);
        client.on("raw", this.updateVoiceState.bind(this));
    }

    public updateVoiceState(data: any): void  {
        if (!data || !["VOICE_SERVER_UPDATE", "VOICE_STATE_UPDATE"].includes(data.t || "")) {
            return;
        }
        const player = this.players.get(data.d.guild_id);

        if (!player) {
            return;
        }

        if (data.t === "VOICE_SERVER_UPDATE") {
            this.voiceState.op = "voiceUpdate";
            this.voiceState.guildId = data.d.guild_id;
            this.voiceState.event = data.d;
        } else {
            if (data.d.user_id !== this.userId) {
                return;
            }
            this.voiceState.sessionId = data.d.session_id;
            if (player && data.d.channel_id) {
                const newChannel = this.client.channels.get(data.d.channel_id);
                if (player.voiceChannel.id !== newChannel.id) {
                    this.emit("playerMove", player, player.voiceChannel, newChannel);
                }
                player.voiceChannel = newChannel;
            }
        }

        if (JSON.stringify(Object.keys(this.voiceState).sort()) === JSON.stringify(["op", "guildId", "sessionId", "event"].sort())) {
            player.node.send(this.voiceState);
            this.voiceState = {};
        }
    }

    /**
     * Searches YouTube with the query. Note: As of writing this only youtube worked.
     * @param {string} query - The query to search against.
     * @param {User} user - The user who requested the tracks.
     * @returns {Promise<SearchResult>} - The search result.
     */
    public search(query: string, user: User): Promise<SearchResult> {
        return new Promise(async (resolve, reject) => {
            const node: Node = this.nodes.leastUsed.first();

            if (!node) {
                throw new Error("ErelaClient#search() No available nodes.");
            }

            if (!this.httpRegex.test(query)) {
                query = `ytsearch:${query}`;
            }
            const url = `http://${node.options.host}:${node.options.port}/loadtracks`;

            const res = await Axios.get(url, {
                headers: { Authorization: node.options.password },
                params: { identifier: query },
            }).catch((err) => {
                return reject(err);
            });

            node.calls++;

            if (!res || !res.data || !res.data.tracks) {
                return reject(new Error("No data returned from query."));
            }

            if (!res.data.tracks[0]) {
                return reject(new Error("No tracks were found."));
            }

            const result = new SearchResult(res.data, this.track, user);
            return resolve(result);
        });
    }

    public sendWS(data: any): void {
        const guild = this.client.guilds.get(data.d.guild_id);
        if (guild) { this.client.ws.shards ? guild.shard.send(data) : this.client.ws.send(data); }
    }
}
