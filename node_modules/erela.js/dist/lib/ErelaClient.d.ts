/// <reference types="node" />
import { User } from "discord.js";
import { EventEmitter } from "events";
import { Node } from "./structures/Node";
import { Player } from "./structures/Player";
import { Queue } from "./structures/Queue";
import { SearchResult } from "./entities/SearchResult";
import { Track } from "./structures/Track";
import PlayerStore from "./stores/PlayerStore";
import NodeStore from "./stores/NodeStore";
import { Type } from "./entities/Utils";
/**
 * The INodeOptions interface.
 */
export interface INodeOptions {
    /**
     * The host for the node.
     */
    host: string;
    /**
     * The port for the node.
     */
    port: number;
    /**
     * The password for the node.
     */
    password: string;
    /**
     * The retry amount for the node.
     */
    retryAmount?: number;
    /**
     * The retry delay for the node.
     */
    retryDelay?: number;
}
/**
 * The IErelaOptions interface.
 * @export
 * @interface IErelaOptions
 */
export interface IErelaOptions {
    /**
     * Shard count.
     */
    shardCount?: number;
    /**
     * The custom Player class.
     */
    player?: Type<Player>;
    /**
     * The custom Node class.
     */
    node?: Type<Node>;
    /**
     * The custom Track class.
     */
    track?: Type<Track>;
    /**
     * The custom Queue class.
     */
    queue?: Type<Queue>;
}
/**
 * The Erela class.
 * @noInheritDoc
 */
export declare class ErelaClient extends EventEmitter {
    /**
     * The Discord client.
     */
    readonly client: any;
    /**
     * The shard count.
     */
    readonly shardCount: number;
    /**
     * The client user ID.
     */
    readonly userId: string;
    /**
     * The custom Node class.
     */
    readonly node: Type<Node>;
    /**
     * The custom Player class.
     */
    readonly player: Type<Player>;
    /**
     * The custom Queue class.
     */
    readonly queue: Type<Queue>;
    /**
     * The custom Track class.
     */
    readonly track: Type<Track>;
    /**
     * The PlayerStore collection.
     */
    readonly players: PlayerStore;
    /**
     * The NodeStore collection.
     */
    readonly nodes: NodeStore;
    private voiceState;
    private readonly httpRegex;
    /**
     * Emitted when a player is created.
     * @event ErelaClient#playerCreate
     * @param {Player} player - The created player.
     */
    /**
     * Emitted when a player is destroyed.
     * @event ErelaClient#playerDestroy
     * @param {Player} player - The destroyed player.
     */
    /**
     * Emitted when a player is moved to a new channel.
     * @event ErelaClient#playerMove
     * @param {Player} player - The moved player.
     * @param {VoiceChannel} oldChannel - The old voice channel.
     * @param {VoiceChannel} newChannel - The new voice channel.
     */
    /**
     * Emitted when a track is started.
     * @event ErelaClient#trackStart
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that started.
     */
    /**
     * Emitted when a track ends.
     * @event ErelaClient#trackEnd
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     */
    /**
     * Emitted when a track gets stuck during playback.
     * @event ErelaClient#trackStuck
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     * @param {*} message - The message for the event.
     */
    /**
     * Emitted when a track errors during playback.
     * @event ErelaClient#trackStuck
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     * @param {*} message - The message for the event.
     */
    /**
     * Emitted when a queue ends.
     * @event ErelaClient#queueEnd
     * @param {Player} player - The player who's queue has ended.
     */
    /**
     * Emitted when a player voice channel connected is closed.
     * @event ErelaClient#socketClosed
     * @param {Player} player - The player.
     */
    /**
     * Emitted when a node is created.
     * @event ErelaClient#nodeCreate
     * @param {Node} node - The created node.
     */
    /**
     * Emitted when a node connects.
     * @event ErelaClient#nodeConnect
     * @param {Node} node - The node that connected.
     */
    /**
     * Emitted when a node reconnects.
     * @event ErelaClient#nodeReconnect
     * @param {Node} node - The node that reconnected.
     */
    /**
     * Emitted when a node encounters an error.
     * @event ErelaClient#nodeError
     * @param {Node} node - The node.
     * @param {Error} error - The error.
     */
    /**
     * Emitted when a node disconnects abnormally.
     * @event ErelaClient#nodeDisconnect
     * @param {Node} node - The node.
     * @param {Error} error - The error.
     */
    /**
     * Creates an instance of ErelaClient.
     * @param {*} client - The Discord client.
     * @param {Array<INodeOptions>} nodes - The nodes to use.
     * @param {IErelaOptions} [options=defaultOptions] - Options for the client.
     */
    constructor(client: any, nodes: INodeOptions[], options?: IErelaOptions);
    updateVoiceState(data: any): void;
    /**
     * Searches YouTube with the query. Note: As of writing this only youtube worked.
     * @param {string} query - The query to search against.
     * @param {User} user - The user who requested the tracks.
     * @returns {Promise<SearchResult>} - The search result.
     */
    search(query: string, user: User): Promise<SearchResult>;
    sendWS(data: any): void;
}
