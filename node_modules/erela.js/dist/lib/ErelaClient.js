"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const events_1 = require("events");
const Node_1 = require("./structures/Node");
const Player_1 = require("./structures/Player");
const Queue_1 = require("./structures/Queue");
const SearchResult_1 = require("./entities/SearchResult");
const Track_1 = require("./structures/Track");
const PlayerStore_1 = __importDefault(require("./stores/PlayerStore"));
const NodeStore_1 = __importDefault(require("./stores/NodeStore"));
const defaultOptions = {
    shardCount: 1,
    player: Player_1.Player,
    node: Node_1.Node,
    track: Track_1.Track,
    queue: Queue_1.Queue,
};
/**
 * The Erela class.
 * @noInheritDoc
 */
class ErelaClient extends events_1.EventEmitter {
    /**
     * Emitted when a player is created.
     * @event ErelaClient#playerCreate
     * @param {Player} player - The created player.
     */
    /**
     * Emitted when a player is destroyed.
     * @event ErelaClient#playerDestroy
     * @param {Player} player - The destroyed player.
     */
    /**
     * Emitted when a player is moved to a new channel.
     * @event ErelaClient#playerMove
     * @param {Player} player - The moved player.
     * @param {VoiceChannel} oldChannel - The old voice channel.
     * @param {VoiceChannel} newChannel - The new voice channel.
     */
    /**
     * Emitted when a track is started.
     * @event ErelaClient#trackStart
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that started.
     */
    /**
     * Emitted when a track ends.
     * @event ErelaClient#trackEnd
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     */
    /**
     * Emitted when a track gets stuck during playback.
     * @event ErelaClient#trackStuck
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     * @param {*} message - The message for the event.
     */
    /**
     * Emitted when a track errors during playback.
     * @event ErelaClient#trackStuck
     * @param {Player} player - The player that has the track.
     * @param {Track} track - The track that ended.
     * @param {*} message - The message for the event.
     */
    /**
     * Emitted when a queue ends.
     * @event ErelaClient#queueEnd
     * @param {Player} player - The player who's queue has ended.
     */
    /**
     * Emitted when a player voice channel connected is closed.
     * @event ErelaClient#socketClosed
     * @param {Player} player - The player.
     */
    /**
     * Emitted when a node is created.
     * @event ErelaClient#nodeCreate
     * @param {Node} node - The created node.
     */
    /**
     * Emitted when a node connects.
     * @event ErelaClient#nodeConnect
     * @param {Node} node - The node that connected.
     */
    /**
     * Emitted when a node reconnects.
     * @event ErelaClient#nodeReconnect
     * @param {Node} node - The node that reconnected.
     */
    /**
     * Emitted when a node encounters an error.
     * @event ErelaClient#nodeError
     * @param {Node} node - The node.
     * @param {Error} error - The error.
     */
    /**
     * Emitted when a node disconnects abnormally.
     * @event ErelaClient#nodeDisconnect
     * @param {Node} node - The node.
     * @param {Error} error - The error.
     */
    /**
     * Creates an instance of ErelaClient.
     * @param {*} client - The Discord client.
     * @param {Array<INodeOptions>} nodes - The nodes to use.
     * @param {IErelaOptions} [options=defaultOptions] - Options for the client.
     */
    constructor(client, nodes, options) {
        super();
        /**
         * The shard count.
         */
        this.shardCount = 1;
        this.voiceState = {};
        this.httpRegex = /^https?:\/\//;
        let _nodes = [];
        let _options = defaultOptions;
        if (Array.isArray(nodes) && !options) {
            _nodes = nodes;
        }
        else if (nodes && !Array.isArray(nodes) && !options) {
            _options = nodes;
        }
        else if (Array.isArray(nodes) && options) {
            _nodes = nodes;
            _options = options;
        }
        this.client = client;
        this.userId = client.user.id;
        this.shardCount = _options.shardCount || 1;
        this.node = _options.node || Node_1.Node;
        this.player = _options.player || Player_1.Player;
        this.queue = _options.queue || Queue_1.Queue;
        this.track = _options.track || Track_1.Track;
        this.players = new PlayerStore_1.default(this);
        this.nodes = new NodeStore_1.default(this, _nodes);
        client.on("raw", this.updateVoiceState.bind(this));
    }
    updateVoiceState(data) {
        if (!data || !["VOICE_SERVER_UPDATE", "VOICE_STATE_UPDATE"].includes(data.t || "")) {
            return;
        }
        const player = this.players.get(data.d.guild_id);
        if (!player) {
            return;
        }
        if (data.t === "VOICE_SERVER_UPDATE") {
            this.voiceState.op = "voiceUpdate";
            this.voiceState.guildId = data.d.guild_id;
            this.voiceState.event = data.d;
        }
        else {
            if (data.d.user_id !== this.userId) {
                return;
            }
            this.voiceState.sessionId = data.d.session_id;
            if (player && data.d.channel_id) {
                const newChannel = this.client.channels.get(data.d.channel_id);
                if (player.voiceChannel.id !== newChannel.id) {
                    this.emit("playerMove", player, player.voiceChannel, newChannel);
                }
                player.voiceChannel = newChannel;
            }
        }
        if (JSON.stringify(Object.keys(this.voiceState).sort()) === JSON.stringify(["op", "guildId", "sessionId", "event"].sort())) {
            player.node.send(this.voiceState);
            this.voiceState = {};
        }
    }
    /**
     * Searches YouTube with the query. Note: As of writing this only youtube worked.
     * @param {string} query - The query to search against.
     * @param {User} user - The user who requested the tracks.
     * @returns {Promise<SearchResult>} - The search result.
     */
    search(query, user) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const node = this.nodes.leastUsed.first();
            if (!node) {
                throw new Error("ErelaClient#search() No available nodes.");
            }
            if (!this.httpRegex.test(query)) {
                query = `ytsearch:${query}`;
            }
            const url = `http://${node.options.host}:${node.options.port}/loadtracks`;
            const res = yield axios_1.default.get(url, {
                headers: { Authorization: node.options.password },
                params: { identifier: query },
            }).catch((err) => {
                return reject(err);
            });
            node.calls++;
            if (!res || !res.data || !res.data.tracks) {
                return reject(new Error("No data returned from query."));
            }
            if (!res.data.tracks[0]) {
                return reject(new Error("No tracks were found."));
            }
            const result = new SearchResult_1.SearchResult(res.data, this.track, user);
            return resolve(result);
        }));
    }
    sendWS(data) {
        const guild = this.client.guilds.get(data.d.guild_id);
        if (guild) {
            this.client.ws.shards ? guild.shard.send(data) : this.client.ws.send(data);
        }
    }
}
exports.ErelaClient = ErelaClient;
