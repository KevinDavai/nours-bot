import { Track } from "./Track";
import { ErelaClient } from "../ErelaClient";
/**
 * The Queue class.
 * @noInheritDoc
 */
export declare class Queue extends Array {
    readonly erela: ErelaClient;
    /**
     * Returns the total duration of the queue.
     * @returns {number} - The duration of the queue.
     */
    get duration(): number;
    /**
     * Returns the size of the queue.
     * @returns {number} - The size of the queue.
     */
    get size(): number;
    /**
     * Returns if the queue is empty or not.
     * @returns {boolean} - If the queue is empty or not.
     */
    get empty(): boolean;
    /**
     * Creates an instance of Queue.
     * @param {ErelaClient} erela - The Erela Client.
     */
    constructor(erela: ErelaClient);
    /**
     * Adds a track to the queue.
     * @param {Track} track - The track to add.
     * @param {number} [offset=0] - The offset to add the track at.
     */
    add(track: Track, offset?: number): void;
    /**
     * Removes a track to the queue. Defaults to the first track.
     * @param {(Track|number)} [track=0] - The track to remove.
     * @returns {(Track|null)} - The track that was removed, or null if the track does not exist.
     */
    removeFrom(start: number, end: number): Track[] | null;
    /**
     * Removes a track to the queue. Defaults to the first track.
     * @param {(Track|number)} [track=0] - The track to remove.
     * @returns {(Track|null)} - The track that was removed, or null if the track does not exist.
     */
    remove(track?: Track | number): Track | null;
    /**
     * Clears the queue.
     */
    clear(): void;
    /**
     * Shuffles the queue.
     */
    shuffle(): void;
}
