/// <reference types="node" />
import WebSocket from "ws";
import { ErelaClient, INodeOptions } from "../ErelaClient";
/**
 * The INodeMemoryStats interface.
 */
interface INodeMemoryStats {
    /**
     * The free memory.
     */
    free: number;
    /**
     * The used memory.
     */
    used: number;
    /**
     * The allocated memory.
     */
    allocated: number;
    /**
     * The reservable memory.
     */
    reservable: number;
}
/**
 * The INodeCPUStats interface.
 * @interface INodeCPUStats
 */
interface INodeCPUStats {
    /**
     * The amount of cores on the CPU.
     */
    cores: number;
    /**
     * The system load on the cores on the CPU.
     */
    systemLoad: number;
    /**
     * The lavalink load on the cores on the CPU.
     */
    lavalinkLoad: number;
}
/**
 * The INodeFrameStats interface.
 */
interface INodeFrameStats {
    /**
     * The amount of sent frames.
     */
    sent?: number;
    /**
     * The amount of nulled frames.
     */
    nulled?: number;
    /**
     * The amount of deficit frames.
     */
    deficit?: number;
}
/**
 * The INodeStats interface.
 * @interface INodeStats
 */
interface INodeStats {
    /**
     * The amount of players on the node.
     */
    players: number;
    /**
     * The amount of players playing on the node.
     */
    playingPlayers: number;
    /**
     * The duration the node has been up.
     */
    uptime: number;
    /**
     * The nodes memory stats.
     */
    memory: INodeMemoryStats;
    /**
     * The nodes CPU stats.
     */
    cpu: INodeCPUStats;
    /**
     * The nodes frame stats.
     */
    frameStats?: INodeFrameStats;
}
/**
 * The Node class.
 */
export declare class Node {
    readonly erela: ErelaClient;
    /**
     * The options for the new.
     */
    options: INodeOptions;
    websocket: WebSocket | null;
    /**
     * The stats for the node.
     */
    stats: INodeStats;
    reconnectTimeout: NodeJS.Timeout | undefined;
    /**
     * The amount the node will try to reconnect.
     */
    reconnectAttempts: number;
    /**
     * The amount the node will try to reconnect.
     */
    retryAmount: number;
    /**
     * The amount the node will delay after a failed reconnect.
     */
    retryDelay: number;
    /**
     * The amount of REST calls the node has made.
     */
    calls: number;
    /**
     * Returns if connected to the Node.
     */
    get connected(): boolean;
    /**
     * Creates an instance of Node and connects after being created.
     * @param {ErelaClient} erela - The Erela client.
     * @param {INodeOptions} options - The Node options.
     */
    constructor(erela: ErelaClient, options: INodeOptions);
    /**
     * Changes the node options and reconnects.
     * @param {INodeOptions} options - The new Nodes options.
     */
    setOptions(options: INodeOptions): void;
    /**
     * Connects to the Node.
     */
    connect(): void;
    /**
     * Reconnects to the Node.
     */
    reconnect(): void;
    /**
     * Destroys the Node.
     */
    destroy(): void;
    /**
     * Sends data to the Node.
     * @param {object} data - The data to send.
     */
    send(data: object): Promise<boolean>;
    _onOpen(): void;
    _onClose(code: number, reason: string): void;
    _onMessage(d: Buffer | string): void;
    _onError(error: Error): void;
    handleEvent(message: any): void;
}
export {};
