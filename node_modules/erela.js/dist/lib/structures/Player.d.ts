import { Guild, TextChannel, VoiceChannel } from "discord.js";
import { ErelaClient } from "../ErelaClient";
import { Node } from "./Node";
import { Queue } from "./Queue";
/**
 * The IPlayerOptions interface.
 */
export interface IPlayerOptions {
    /**
     * The guild to connect to.
     */
    guild: Guild;
    /**
     * The text channel to connect to.
     */
    textChannel: TextChannel;
    /**
     * The voice channel to connect to.
     */
    voiceChannel: VoiceChannel;
    /**
     * Whether to deafen the client.
     */
    selfDeaf?: boolean;
    /**
     * Whether to mute the client.
     */
    selfMute?: boolean;
}
/**
 * The IEqualizerBand interface.
 */
export interface IEqualizerBand {
    /**
     * The band for the equalizer band.
     */
    band: number;
    /**
     * The gain for the equalizer band.
     */
    gain: number;
}
/**
 * The Player class.
 */
export declare class Player {
    readonly erela: ErelaClient;
    /**
     * The players node.
     */
    readonly node: Node;
    /**
     * The players options.
     */
    readonly options: IPlayerOptions;
    /**
     * The players guild it's connected to.
     */
    readonly guild: Guild;
    /**
     * The players text channel it's connected to.
     */
    readonly textChannel: TextChannel;
    /**
     * The players voice channel it's connected to.
     */
    voiceChannel: VoiceChannel;
    /**
     * The players equalizer bands.
     */
    bands: IEqualizerBand[];
    /**
     * The players queue.
     */
    readonly queue: Queue;
    /**
     * Whether the player is playing.
     */
    playing: boolean;
    /**
     * The players current position in the track.
     */
    position: number;
    /**
     * The players current volume.
     */
    volume: number;
    /**
     * Whether the player is repeating the current track.
     */
    trackRepeat: boolean;
    /**
     * Whether the player is repeating the queue.
     */
    queueRepeat: boolean;
    /**
     * Creates an instance of Player.
     * @param {ErelaClient} erela - The Erela client.
     * @param {Node} node - The Erela Node.
     * @param {IPlayerOptions} options - The player options.
     * @param {object} extra - Extra data to pass when extending for custom classes.
     */
    constructor(erela: ErelaClient, node: Node, options: IPlayerOptions, extra: object);
    /**
     * Plays the next track in the queue.
     */
    play(): void;
    /**
     * Sets the players volume.
     * @param {number} volume - The volume to set.
     */
    setVolume(volume: number): void;
    /**
     * Sets the players equalizer. Pass a empty array to reset the bands.
     * @param {Array<EqualizerBand>} bands - The array of bands to set.
     * @example
     * player.setEQ([
     *      { band: 0, gain: 0.15 },
     *      { band: 1, gain: 0.15 },
     *      { band: 2, gain: 0.15 }
     * ]);
     */
    setEQ(bands: IEqualizerBand[]): void;
    /**
     * Sets the track repeat.
     * @param {boolean} repeat - If track repeat should be enabled.
     */
    setTrackRepeat(repeat: boolean): void;
    /**
     * Sets the queue repeat.
     * @param {boolean} repeat - If queue repeat should be enabled.
     */
    setQueueRepeat(repeat: boolean): void;
    updateState(data: any): void;
    /**
     * Stops the current track.
     */
    stop(): void;
    /**
     * Pauses the current track.
     * @param {boolean} pause - Whether to pause the current track.
     */
    pause(pause: boolean): void;
    /**
     * Seeks to the position in the current track.
     * @param {boolean} pause - Whether to pause the current track.
     */
    seek(position: number): void;
}
